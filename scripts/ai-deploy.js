#!/usr/bin/env node

/**
 * AI Agent Deployment Script
 * Provides a CLI interface for AI agents to safely deploy Shopify themes
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

class AIDeployment {
  constructor() {
    this.validateEnvironment();
  }

  validateEnvironment() {
    const required = [
      'SHOPIFY_STORE_URL',
      'SHOPIFY_ACCESS_TOKEN',
      'SHOPIFY_CLI_PARTNER_TOKEN'
    ];

    const missing = required.filter(env => !process.env[env]);
    if (missing.length > 0) {
      console.error('‚ùå Missing required environment variables:', missing.join(', '));
      process.exit(1);
    }
  }

  async runTests() {
    console.log('üß™ Running tests...');
    try {
      execSync('npm run test', { stdio: 'inherit' });
      console.log('‚úÖ All tests passed');
      return true;
    } catch (error) {
      console.error('‚ùå Tests failed');
      return false;
    }
  }

  async deployToDev() {
    console.log('üöÄ Deploying to development theme...');
    try {
      const result = execSync('shopify theme push --development --json', { 
        encoding: 'utf8',
        env: { ...process.env }
      });
      
      const deployment = JSON.parse(result);
      console.log('‚úÖ Development deployment successful');
      console.log(`üì± Preview URL: https://${process.env.SHOPIFY_STORE_URL}?preview_theme_id=${deployment.theme.id}`);
      
      return deployment;
    } catch (error) {
      console.error('‚ùå Development deployment failed:', error.message);
      return null;
    }
  }

  async createPullRequest(title, description) {
    console.log('üìù Creating pull request...');
    try {
      const branch = execSync('git branch --show-current', { encoding: 'utf8' }).trim();
      
      if (branch === 'main' || branch === 'develop') {
        console.error('‚ùå Cannot create PR from main/develop branch');
        return null;
      }

      execSync(`gh pr create --title "${title}" --body "${description}" --base develop`, {
        stdio: 'inherit'
      });
      
      console.log('‚úÖ Pull request created');
      return true;
    } catch (error) {
      console.error('‚ùå Failed to create pull request:', error.message);
      return null;
    }
  }

  async safeDeployment(options = {}) {
    const {
      skipTests = false,
      createPR = true,
      prTitle = 'AI Generated Theme Updates',
      prDescription = 'Automated theme changes generated by AI agent'
    } = options;

    console.log('ü§ñ Starting AI-safe deployment process...');

    // Step 1: Run tests (unless skipped)
    if (!skipTests) {
      const testsPass = await this.runTests();
      if (!testsPass) {
        console.error('‚ùå Deployment aborted due to test failures');
        return false;
      }
    }

    // Step 2: Deploy to development theme
    const deployment = await this.deployToDev();
    if (!deployment) {
      console.error('‚ùå Deployment aborted due to dev deployment failure');
      return false;
    }

    // Step 3: Create pull request (if requested)
    if (createPR) {
      await this.createPullRequest(prTitle, prDescription);
    }

    console.log('üéâ AI deployment process completed successfully!');
    return true;
  }
}

// CLI Interface
if (require.main === module) {
  const args = process.argv.slice(2);
  const command = args[0];

  const deployer = new AIDeployment();

  switch (command) {
    case 'test':
      deployer.runTests();
      break;
    
    case 'deploy-dev':
      deployer.deployToDev();
      break;
    
    case 'safe-deploy':
      const options = {};
      if (args.includes('--skip-tests')) options.skipTests = true;
      if (args.includes('--no-pr')) options.createPR = false;
      
      const titleIndex = args.indexOf('--title');
      if (titleIndex !== -1 && args[titleIndex + 1]) {
        options.prTitle = args[titleIndex + 1];
      }
      
      deployer.safeDeployment(options);
      break;
    
    default:
      console.log(`
ü§ñ AI Deployment CLI

Usage:
  node scripts/ai-deploy.js <command> [options]

Commands:
  test                    Run all tests
  deploy-dev             Deploy to development theme
  safe-deploy            Full safe deployment process

Options for safe-deploy:
  --skip-tests           Skip running tests
  --no-pr               Don't create pull request
  --title "PR Title"    Custom PR title

Examples:
  node scripts/ai-deploy.js safe-deploy
  node scripts/ai-deploy.js safe-deploy --skip-tests --title "Fix header styling"
      `);
  }
}

module.exports = AIDeployment;
